drop_na(Species)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,LMA,Plot_code,Leafcode,Tree_code)%>%
unique()%>%
mutate(Outlier_id=outliers::scores(sqrt(LMA),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
rename(Trait_value=LMA)
varp <- varpart (NNNNN_lma$Trait_value, ~ Plot_code,~ Site, ~Species, data = NNNNN_lma)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
NNNNN_lt<- NNNNN %>%
rename(Trait_value=LeafThickness.mm)%>%
drop_na(Trait_value)%>%
drop_na(Species)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Trait_value,Plot_code,Leafcode)%>%
unique()%>%
mutate(Outlier_id=outliers::scores(sqrt(Trait_value),type="iqr"))%>%
filter(Outlier_id<1.5)
dim(unique(NNNNN_lt[,1:5]))[1]==dim(NNNNN_lt)[1] #This is to check whether there are duplicate rows
varp <- varpart (NNNNN_lt$Trait_value, ~ Plot_code,~ Site, ~Species, data = NNNNN_lt)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
Amax_max<- Amax %>% drop_na(Species)%>% drop_na(Amax)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Amax,Plot_code)%>%
mutate(Outlier_id=outliers::scores(sqrt(Amax),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
rename(Trait_value=Amax)
varp <- varpart (Amax_max$Trait_value, ~ Plot_code,~ Site,~Species, data = Amax_max)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
Amax_sat<- Amax %>% drop_na(Species)%>% drop_na(Asat)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Asat,Plot_code)%>%
mutate(Outlier_id=outliers::scores(sqrt(Asat),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
rename(Trait_value=Asat)
varp <- varpart (Amax_sat$Trait_value, ~ Plot_code,~ Site,~Species, data = Amax_sat)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
library(lme4)
hist(NNNNN2$Ngkg)
get_var_part2<-function(NNNNN2,trait_name){
NNNNN2<-NNNNN2%>%
mutate(Genus=stringr::str_extract(Species,'\\w*'))%>%
left_join(Species_table[,c('Tree_code','Family')],by="Tree_code")%>%
rename(Plot=Plot_code,Fam=Family)
#Variance partitionin
model2 <- lmer(Trait_value ~ 1 + (1|Plot) + (1|Fam/Genus/Species), data= NNNNN2)
vSWC     = VarCorr(model2)
sp.var  = vSWC$`Species:(Genus:Fam)`[1]
gen.var = vSWC$`Genus:Fam`[1]
fam.var = vSWC$Fam[1]
plot.var= vSWC$Plot[1]
res.var = attr(vSWC,"sc")^2
Species_var     = sp.var /(sp.var+gen.var+fam.var+plot.var+res.var)
Genus_var     = gen.var/(sp.var+gen.var+fam.var+plot.var+res.var)
Family_var     = fam.var/(sp.var+gen.var+fam.var+plot.var+res.var)
Plot_var     = plot.var/(sp.var+gen.var+fam.var+plot.var+res.var)
Residual_var     = res.var /(sp.var+gen.var+fam.var+plot.var+res.var)
X=rbind(Species_var,Genus_var,Family_var,Plot_var,Residual_var)
colnames(X)="Variance_proportion"
vcomps2=as.data.frame(X, keep.rownames = TRUE)
vcomps2$Level <- rownames(vcomps2)
vcomps2$Trait <- trait_name
vcomps2$Trait<-as.factor(vcomps2$Trait)
vcomps2$Level<-as.factor(vcomps2$Level)
return(vcomps2)
}
vcomps1<- get_var_part2(Huber, "Huber_value")
vcomps2<- get_var_part2(Ks, "Ks")
vcomps1[[1]]<- get_var_part2(Huber, "Huber_value")
vcomps1[[2]]<- get_var_part2(Ks, "Ks")
vcomps1[[3]]<- get_var_part2(Twig_density, "Twig_density")
vcomps1[[3]]<- get_var_part2(Twig_density, "Twig_density")
vcomps1[[4]]<- get_var_part2(turgor, "Turgor loss point")
vcomps1[[4]]<- get_var_part2(turgor, "Turgor loss point")
vcomps1[[5]]<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps1[[3]]<- get_var_part2(Twig_density, "Twig_density")
vcomps1[[4]]<- get_var_part2(turgor, "Turgor loss point")
vcomps1[[5]]<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps1[[6]]<- get_var_part2(VCmax_jmax, "Jmax_25")
vcomps1[[7]]<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps1[[8]]<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps1[[9]]<- get_var_part2(NNNNN_lma, "LMA")
vcomps1[[11]]<- get_var_part2(Amax_max, "Amax")
vcomps1[[12]]<- get_var_part2(Amax_sat, "Asat")
vcomps1[[10]]<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps1[[7]]<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps1[[8]]<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps1[[9]]<- get_var_part2(NNNNN_lma, "LMA")
vcomps1[[10]]<- get_var_part2(NNNNN_lt, "Leaf thickness")
NNNNN_lt<- NNNNN %>%
rename(Trait_value=LeafThickness.mm)%>%
drop_na(Trait_value)%>%
drop_na(Species)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Trait_value,Plot_code,Leafcode,Tree_code)%>%
unique()%>%
mutate(Outlier_id=outliers::scores(sqrt(Trait_value),type="iqr"))%>%
filter(Outlier_id<1.5)
dim(unique(NNNNN_lt[,1:5]))[1]==dim(NNNNN_lt)[1] #This is to check whether there are duplicate rows
varp <- varpart (NNNNN_lt$Trait_value, ~ Plot_code,~ Site, ~Species, data = NNNNN_lt)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
View(Amax)
View(Amax)
Amax_max<- Amax %>% drop_na(Species)%>% drop_na(Amax)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Amax,Plot_code,Tree_code)%>%
mutate(Outlier_id=outliers::scores(sqrt(Amax),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
rename(Trait_value=Amax)
varp <- varpart (Amax_max$Trait_value, ~ Plot_code,~ Site,~Species, data = Amax_max)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
Amax_sat<- Amax %>% drop_na(Species)%>% drop_na(Asat)%>%
mutate(Site=substr(Plot_code,0,3))%>%
select(Site,Species,Asat,Plot_code,Tree_code)%>%
mutate(Outlier_id=outliers::scores(sqrt(Asat),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
rename(Trait_value=Asat)
varp <- varpart (Amax_sat$Trait_value, ~ Plot_code,~ Site,~Species, data = Amax_sat)
plot (varp, digits = 2, Xnames = c('Plot', 'Site','Species'), bg = c('navy', 'tomato','green'))
vcomps1[[10]]<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps1[[11]]<- get_var_part2(Amax_max, "Amax")
vcomps1[[12]]<- get_var_part2(Amax_sat, "Asat")
vcomps<-rbind(vcomps1[[1:12]])
vcomps<-rbind(unlistvcomps1))
vcomps<-rbind(unlist(vcomps1))
View(vcomps1)
vcomps1<-as.list()
vcomps1<-as.list(get_var_part2(Huber, "Huber_value"))
View(vcomps1)
vcomps1[[1]]<-as.list(get_var_part2(Huber, "Huber_value"))
vcomps1<-list(get_var_part2(Huber, "Huber_value"))
vcomps1[[1]]<-(get_var_part2(Huber, "Huber_value"))
vcomps1[[1]]=0
vcomps[[1]]=0
View(vcomps)
vcomps12[[1]]=0
vcomps12[[1]]=as.list(get_var_part2(Huber, "Huber_value"))
vcomps12[[1]]=as.list(get_var_part2(Huber, "Huber_value"))
vcomps12=as.list(get_var_part2(Huber, "Huber_value"))
View(vcomps12)
vcomps1<-(get_var_part2(Huber, "Huber_value"))
vcomps1<-(get_var_part2(Huber, "Huber_value"))
vcomps2<- get_var_part2(Ks, "Ks")
vcomps2<- get_var_part2(Ks, "Ks")
vcomps3<- get_var_part2(Twig_density, "Twig_density")
vcomps3<- get_var_part2(Twig_density, "Twig_density")
vcomps4<- get_var_part2(turgor, "Turgor loss point")
vcomps4<- get_var_part2(turgor, "Turgor loss point")
vcomps5<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps6<- get_var_part2(VCmax_jmax, "Jmax_25")
vcomps7<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps8<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps8<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps9<- get_var_part2(NNNNN_lma, "LMA")
vcomps9<- get_var_part2(NNNNN_lma, "LMA")
vcomps10<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps10<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps11<- get_var_part2(Amax_max, "Amax")
vcomps11<- get_var_part2(Amax_max, "Amax")
vcomps12<- get_var_part2(Amax_sat, "Asat")
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
hist(Huber$Trait_value)
hist(Ks$Trait_value)
hist(Twig_density$Trait_value)
hist(turgor$Trait_value)
hist(VCmax_vcmax$Trait_value)
hist(VCmax_jmax$Trait_value)
hist(NNNNN_Rd$Trait_value)
hist(NNNNN_N_gkg$Trait_value)
hist(NNNNN_lma$Trait_value)
hist(NNNNN_lt$Trait_value)
hist(Amax_max$Trait_value)
hist(Amax_max$Trait_value)
View(vcomps9)
?level
?relevel
?levels
levels(vcomps)<- c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var")
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
levels(vcomps)<- c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var")
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
levels(vcomps$Level)<- c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var")
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
View(vcomps)
vcomps1<-(get_var_part2(Huber, "Huber_value"))
vcomps3<- get_var_part2(Twig_density, "Twig_density")
vcomps3<- get_var_part2(Twig_density, "Twig_density")
vcomps4<- get_var_part2(turgor, "Turgor loss point")
vcomps4<- get_var_part2(turgor, "Turgor loss point")
vcomps5<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps5<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps6<- get_var_part2(VCmax_jmax, "Jmax_25")
vcomps3<- get_var_part2(Twig_density, "Twig_density")
vcomps4<- get_var_part2(turgor, "Turgor loss point")
vcomps5<- get_var_part2(VCmax_vcmax, "Vcmax_25")
vcomps6<- get_var_part2(VCmax_jmax, "Jmax_25")
vcomps7<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps7<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps8<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps7<- get_var_part2(NNNNN_Rd, "Dark respiration")
vcomps8<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps9<- get_var_part2(NNNNN_lma, "LMA")
vcomps8<- get_var_part2(NNNNN_N_gkg, "N content")
vcomps9<- get_var_part2(NNNNN_lma, "LMA")
vcomps10<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps9<- get_var_part2(NNNNN_lma, "LMA")
vcomps10<- get_var_part2(NNNNN_lt, "Leaf thickness")
vcomps11<- get_var_part2(Amax_max, "Amax")
vcomps11<- get_var_part2(Amax_max, "Amax")
vcomps12<- get_var_part2(Amax_sat, "Asat")
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
levels(vcomps$Level)<- c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var")
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
levels(vcomps$Level)<- c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var")
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
vcomps$Level<-factor(c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps$Level<-factor(c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
vcomps$Level<-levels(c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps$Level<-levels(c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()
vcomps$Level<-levels(c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
summary(vcomps)
?levels
?position_stack
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level,order=Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(Level=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var	"))
vcomps<-rbind(vcomps1,vcomps2,vcomps3,vcomps4,vcomps5,vcomps6,vcomps7,vcomps8,vcomps9,vcomps10,vcomps11,vcomps12)
vcomps$Level <- factor(vcomps$Level, levels = c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()+
scale_fill_manual(values=c("Residual_var", "Species_var", "Genus_var", "Family_var", "Plot_var"))
ggplot(data = vcomps, aes(x=Trait, y = Variance_proportion, fill = Level)) +
geom_bar(stat='identity') + coord_flip()
rm(list=ls())
library(tidyverse)
setwd("F:/Oxford/Chapter_one/From_imma/Traits/plotV3/")
library(ggplot2)
library(ggsci)
library(ggExtra)
pheno<- openxlsx::read.xlsx('F:/Oxford/Chapter_one/From_imma/Traits/Decideous_or_evergreen/leaftr_ghana_Jesus_051017_Phenology2.xlsx')%>%
rename(Species=!!as.name("Species_JA_trimfinalspace"))%>%
replace_na(list(Phenology='unkown_in_Jesus'))%>%
mutate(Phenology=stringi::stri_replace_all_charclass(Phenology, "\\p{WHITE_SPACE}", ""))%>%
mutate(Phenology=recode(Phenology,"?ed"='evergreen',"ed"='evergreen',"de"='deciduous'))
pheno<- openxlsx::read.xlsx('F:/Oxford/Chapter_one/From_imma/Traits/Decideous_or_evergreen/leaftr_ghana_Jesus_051017_Phenology2.xlsx')%>%
rename(Species=!!as.name("Species_JA_trimfinalspace"))%>%
replace_na(list(Phenology='unkown_in_Jesus'))%>%
mutate(Phenology=stringi::stri_replace_all_charclass(Phenology, "\\p{WHITE_SPACE}", ""))%>%
mutate(Phenology=recode(Phenology,"?ed"='evergreen',"ed"='evergreen',"de"='deciduous'))
```{r, include=FALSE}
rm(list=ls())
library(tidyverse)
setwd("F:/Oxford/Chapter_one/From_imma/Traits/plotV3/")
library(ggplot2)
library(ggsci)
library(ggExtra)
pheno<- openxlsx::read.xlsx('F:/Oxford/Chapter_one/From_imma/Traits/Decideous_or_evergreen/leaftr_ghana_Jesus_051017_Phenology2.xlsx')%>%
rename(Species=!!as.name("Species_JA_trimfinalspace"))%>%
replace_na(list(Phenology='unkown_in_Jesus'))%>%
mutate(Phenology=stringi::stri_replace_all_charclass(Phenology, "\\p{WHITE_SPACE}", ""))%>%
mutate(Phenology=recode(Phenology,"?ed"='evergreen',"ed"='evergreen',"de"='deciduous'))
pheno<- openxlsx::read.xlsx('F:/Oxford/Chapter_one/From_imma/Traits/Decideous_or_evergreen/leaftr_ghana_Jesus_051017_Phenology2.xlsx')%>%
rename(Species=!!as.name("Species_JA_trimfinalspace"))%>%
replace_na(list(Phenology='unkown_in_Jesus'))%>%
mutate(Phenology=stringi::stri_replace_all_charclass(Phenology, "\\p{WHITE_SPACE}", ""))%>%
mutate(Phenology=recode(Phenology,"?ed"='evergreen',"ed"='evergreen',"de"='deciduous'))
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =F )%>%
rename(LAI_value=!!as.name("T....al"))%>%
mutate(fmv_value=substr(Fmv,1,nchar(Fmv)-1))%>%
mutate(fmv_value=as.numeric(fmv_value))%>%
filter(fmv_value<50)%>%
filter(fmv_value>2)%>%
mutate(Outlier_id=outliers::scores((LAI_value),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =T )%>%
group_by(MONTH)%>%
summarise(mean_LAI = mean(LAI_value,na.rm=T))
library(tidyverse)
library(tidyverse)
library(raster)
library(tidyverse)
library(raster)
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =F )%>%
rename(LAI_value=!!as.name("T....al"))%>%
mutate(fmv_value=substr(Fmv,1,nchar(Fmv)-1))%>%
mutate(fmv_value=as.numeric(fmv_value))%>%
filter(fmv_value<50)%>%
filter(fmv_value>2)%>%
mutate(Outlier_id=outliers::scores((LAI_value),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =T )%>%
group_by(MONTH)%>%
summarise(mean_LAI = mean(LAI_value,na.rm=T))
View(KOG_raw)
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =F )
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("site","PLOT","DATE", "MONTH", "YEAR"),remove =F )%>%
rename(LAI_value=!!as.name("T....al"))%>%
mutate(fmv_value=substr(Fmv,1,nchar(Fmv)-1))%>%
mutate(fmv_value=as.numeric(fmv_value))%>%
filter(fmv_value<50)%>%
filter(fmv_value>2)%>%
mutate(Outlier_id=outliers::scores((LAI_value),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
separate("ï..picture.files", sep='_',into=c("PLOT","DATE", "MONTH", "YEAR"),remove =T )%>%
group_by(MONTH)%>%
summarise(mean_LAI = mean(LAI_value,na.rm=T))
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("site","PLOT","DATE", "MONTH", "YEAR"),remove =F )
KOG_raw<-read.csv("F:/Oxford/Chapter_one/From_imma/Traits/LAI_LAI/ANK_2017.csv")%>%
filter(corrections=="S.& al.+ C.& C.")%>%
separate("ï..picture.files", sep='_',into=c("site","PLOT","DATE", "MONTH", "YEAR"),remove =F )%>%
rename(LAI_value=!!as.name("T....al"))%>%
mutate(fmv_value=substr(Fmv,1,nchar(Fmv)-1))%>%
mutate(fmv_value=as.numeric(fmv_value))%>%
filter(fmv_value<50)%>%
filter(fmv_value>2)%>%
mutate(Outlier_id=outliers::scores((LAI_value),type="iqr"))%>%
filter(Outlier_id<1.5)%>%
group_by(MONTH)%>%
summarise(mean_LAI = mean(LAI_value,na.rm=T))
ppppppppppp()
ppppppppppp()
install.packages(c("coda","mvtnorm","devtools","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
library('rethinking')
?cars
?write.csv
?write.table
ppppppppppp()
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
filename
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
paste(output_folder,filename,'_',plot_name_file,'.csv',sep='')
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
source('E:/RawData_for_database/Ultimate_cleaned_files/Total_soil_resp/Fake_files_producer.R')
?mutate_if
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
rm(list = ls())
library(tidyverse)
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
output_folder<-"E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/"
setwd(output_folder)
filename<-'tot_soil_resp_20190116'
Mother_CSV<-read.csv(paste(filename,'.csv',sep=''),check.names=FALSE)
unique(Mother_CSV$plot_code)
Mother_CSV<-Mother_CSV%>% filter(!stringr::str_detect(plot_code, "[A-z]{3}.[0-9]{2}",negate=T))
Mother_CSV<- Mother_CSV%>%
rename(co2ref=!!as.name("co2ref_ppm_sec"),atmp=!!as.name("atmp_mb"))%>%
rename(manually_collected_final_flux=!!as.name("manually_collected_final_flux_ppm_sec"))%>%
mutate(collar_number=replace_na(collar_number,9999))
Mother_CSV$co2ref_ppm_sec[Mother_CSV$co2ref_ppm_sec<=100]<-100
Mother_CSV$co2ref_ppm_sec<=100
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
Mother_CSV$co2ref_ppm_sec[Mother_CSV$co2ref_ppm_sec<100]<-100
1 * (2 > 0)
1 * (10 > 0)
100 * (10 > 0)
100 * (90 > 100)
100 * (101 > 100)
100 * (102 > 100)
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
output_folder<-"E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/"
setwd(output_folder)
filename<-'tot_soil_resp_20190116'
Mother_CSV<-read.csv(paste(filename,'.csv',sep=''),check.names=FALSE)
unique(Mother_CSV$plot_code)
Mother_CSV<-Mother_CSV%>% filter(!stringr::str_detect(plot_code, "[A-z]{3}.[0-9]{2}",negate=T))
Mother_CSV<- Mother_CSV%>%
rename(co2ref=!!as.name("co2ref_ppm_sec"),atmp=!!as.name("atmp_mb"))%>%
rename(manually_collected_final_flux=!!as.name("manually_collected_final_flux_ppm_sec"))%>%
mutate(collar_number=replace_na(collar_number,9999))%>%
mutate(co2ref=100*(co2ref>100))
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
Mother_CSV<- Mother_CSV%>%
rename(co2ref=!!as.name("co2ref_ppm_sec"),atmp=!!as.name("atmp_mb"))%>%
rename(manually_collected_final_flux=!!as.name("manually_collected_final_flux_ppm_sec"))%>%
mutate(collar_number=replace_na(collar_number,9999))%>%
mutate(co2ref=ifelse(co2ref <= 100, 100, co2ref))%>%
mutate(co2ref=ifelse(co2ref >= 900, 900, co2ref))%>%
mutate(InputF=ifelse(InputF >= 10, 10, InputF))%>%
mutate(InputF=ifelse(InputF <= -10, -10, InputF))%>%
#the below line is used to remove an empty column at the end of the csv file, this is due to
#https://stackoverflow.com/questions/10441437/why-am-i-getting-x-in-my-column-names-when-reading-a-data-frame
if(colnames(Mother_CSV)[length(Mother_CSV)]==""){Mother_CSV<-Mother_CSV[,-length(Mother_CSV)]}
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
summary(Mother_CSV$co2ref)
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
View(Mother_CSV)
source('E:/RawData_for_database/Fake_files_to_satisfy_database/Total_soil_resp/Fake_files_producer.R')
###################
# Usage 3: Figure 3
###################
GapFilling(trait.info, hierarchy.info,
prediction.level = 4,
used.num.hierarchy.levels = 3,
mean.gap.filled.output.path = "mean_gap_filled.txt",
std.gap.filled.output.path="std_gap_filled.txt")
library(BHPMF)
data(trait.info)  # Read the matrix X
data(hierarchy.info) # Read the hierarchy information
setwd('F:/Oxford/Chapter_one/From_imma/Traits/trait_extrapolation')
###################
# Usage 3: Figure 3
###################
GapFilling(trait.info, hierarchy.info,
prediction.level = 4,
used.num.hierarchy.levels = 3,
mean.gap.filled.output.path = "mean_gap_filled.txt",
std.gap.filled.output.path="std_gap_filled.txt")
###############################################################################################
### Once the table to use is selected then put back the hierarchy infomration on the results
##########################
m<-read.csv("mean_gap_filled.txt", sep="")
m<-read.csv("mean_gap_filled.txt", sep="")
m_filled<-cbind(hierarchy,m)
m_ori<-cbind(hierarchy,trait.info)
m<-read.csv("mean_gap_filled.txt", sep="")
m_filled<-cbind(hierarchy.info,m)
m_ori<-cbind(hierarchy.info,trait.info)
View(trait.info)
View(m_filled)
View(m_ori)
hierarchy.info<-hierarchy.info[,1:2]
###################
# Usage 1: Figure 1
###################
GapFilling(trait.info, hierarchy.info,
mean.gap.filled.output.path = "mean_gap_filled.txt",
std.gap.filled.output.path="std_gap_filled.txt")
m<-read.csv("mean_gap_filled.txt", sep="")
m_filled<-cbind(hierarchy.info,m)
m_ori<-cbind(hierarchy.info,trait.info)
View(trait.info)
mean(trait.info[,5],na.rm=T)
hist(trait.info[,5],na.rm=T)
###################
# Usage 1: Figure 1
###################
GapFilling(trait.info, hierarchy.info,
mean.gap.filled.output.path = "mean_gap_filled.txt",
std.gap.filled.output.path="std_gap_filled.txt")
m<-read.csv("mean_gap_filled.txt", sep="")
m_filled<-cbind(hierarchy.info,m)
m_ori<-cbind(hierarchy.info,trait.info)
hist(trait.info[,5],na.rm=T)
mean(trait.info[,5],na.rm=T)
dlstats::cran_stats('ARTofR')
dlstats::cran_stats('ARTofR')
